@page "/R_Profesionales"
@page "/R_Profesionales/{ProfesionalId:int}"
@inject IProfesionalRepositorio ProfesionalRepo;
@inject IServicioRepositorio ServicioRepo;
@inject IProfesionalDetalleRepositorio DetalleRepo;
@inject NavigationManager NavigationManager;


    <MudCard Class="" style="width:35%; height:55%; position: absolute; top: 55%; left: 55%; transform: translate(-50%, -50%); background-color:mintcream">
        <EditForm Model="profesional" OnValidSubmit="Guardar">
        <MudCardContent>

   
    <DataAnnotationsValidator />
                    <label>Id</label>
                    <div class="mb-3 d-flex align-items-center">
                        <div class="d-flex">
                            <MudTextField @bind-Value="profesional.ProfesionalId" class="" />
                            <MudIconButton Icon="@Icons.Material.Filled.Search" aria-label="Buscar" OnClick="Buscar" class="ml-2" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Nombre</label>
                            <MudTextField @bind-Value="profesional.NombreCompleto" class="" />
                        <ValidationMessage For="@(() => profesional.NombreCompleto)" />
                    </div>
                    <div class="mb-3">
                        <label>Especialidad</label>
                            <MudTextField @bind-Value="profesional.Especialidad" class="" />
                        <ValidationMessage For="@(() => profesional.Especialidad)" />
                    </div>                
                    <MudIconButton Icon="@Icons.Material.Filled.Save" aria-label="Guardar" ButtonType="ButtonType.Submit" ></MudIconButton>

                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="Delete"></MudIconButton>
        </MudCardContent>
    </EditForm>
    </MudCard>


@code {
    [Parameter]
    public int ProfesionalId { get; set; }
    public bool eliminado { get; set; }
    private Profesional profesional = new Profesional();
    private ProfesionalDetalle profesionalDetalle = new ProfesionalDetalle();
    private List<ProfesionalDetalle> profesionalDetalles = new List<ProfesionalDetalle>();
    private List<Servicio> servicios = new List<Servicio>();
    private List<Profesional> Profe = new List<Profesional>(); 

    protected override async Task OnInitializedAsync()
    {

        servicios = await ServicioRepo.GetServicio();
        if (ProfesionalId != 0)
        {
            profesional = await ProfesionalRepo.GetProfesionalPorIdAsync(ProfesionalId);
        }
    }
    public async Task Guardar()
    {
        await ProfesionalRepo.CreateProfesional(profesional);
        Nuevo();
        IrAProfesionalDetalle();
        
    }
    
    public void Nuevo()
    {
        profesional = new Profesional();
    }
    public async Task Buscar()
    {
        profesional= await ProfesionalRepo.GetProfesionalPorIdAsync(profesional.ProfesionalId);
    }
    public async Task Delete()
    {
        if (profesional != null)
        {
            eliminado = await ProfesionalRepo.DeleteProfesional(profesional.ProfesionalId);
            if (eliminado)
            {
                Nuevo();
            }
        }
    }
    private void IrAProfesionalDetalle()
    {
        NavigationManager.NavigateTo("R_ProfesionalDetalle");
    }
   
}
