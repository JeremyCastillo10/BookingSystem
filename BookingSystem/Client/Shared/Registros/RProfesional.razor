@page "/R_Profesionales"
@page "/R_Profesionales/{ProfesionalId:int}"
@inject IProfesionalRepositorio ProfesionalRepo;

<EditForm Model="profesional" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <div class="border p-3 w-75" style="margin: 0 auto; width: 50%;">
            <h2 class="text-info pl-3">Registro Profesionales</h2>
            <div class="row">
                <div class="container">
                    <label>Id</label>
                    <div class="mb-3 d-flex align-items-center">
                        <div class="d-flex">
                            <InputNumber @bind-Value="profesional.ProfesionalId" class="form-control" />
                            <MudIconButton Icon="@Icons.Material.Filled.Search" aria-label="Buscar" OnClick="Buscar" class="ml-2" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Nombre</label>
                        <InputText @bind-Value="profesional.NombreCompleto" class="form-control" />
                        <ValidationMessage For="@(() => profesional.NombreCompleto)" />
                    </div>
                    <div class="mb-3">
                        <label>Especialidad</label>
                        <InputText @bind-Value="profesional.Especialidad" class="form-control" />
                        <ValidationMessage For="@(() => profesional.Especialidad)" />
                    </div>


                    <MudIconButton Icon="@Icons.Material.Filled.Save" aria-label="Guardar" ButtonType="ButtonType.Submit"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="Delete"></MudIconButton>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ProfesionalId { get; set; }
    
    public bool eliminado { get; set; }
    private Profesional profesional = new Profesional();

    protected override async Task OnInitializedAsync()
    {
        if (ProfesionalId != 0)
        {
            profesional = await ProfesionalRepo.GetProfesionalPorIdAsync(ProfesionalId);
        }
    }

    public async Task Guardar()
    {
        await ProfesionalRepo.CreateProfesional(profesional);
        Nuevo();

    }
    public void Nuevo()
    {
        profesional = new Profesional();
    }
    public async Task Buscar()
    {
        profesional= await ProfesionalRepo.GetProfesionalPorIdAsync(profesional.ProfesionalId);
    }
    public async Task Delete()
    {
        if (profesional != null)
        {
            eliminado = await ProfesionalRepo.DeleteProfesional(profesional.ProfesionalId);
            if (eliminado)
            {
                Nuevo();
            }
        }
    }
}
