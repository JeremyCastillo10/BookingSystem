@page "/R_Horarios"
@page "/R_Horarios/{HorarioId:int}"
@inject IHorarioRepositorio HorarioRepo;
<EditForm Model="horario" OnSubmit="Guardar">
    <div class="form-group row">
        

        <div class="border p-3 w-75" style="margin: 0 auto; width: 50%;">
        <h2 class="text-info pl-3">Registro Horarios</h2>
        <div class="row">
        <div class="container">
                    <label>Id</label>
                    <div class="mb-3 d-flex align-items-center">
                        
                        <div class="d-flex">
                            <InputNumber @bind-Value="horario.HorarioId" class="form-control" />
                            <MudIconButton Icon="@Icons.Material.Filled.Search" aria-label="Buscar" OnClick="Buscar" class="ml-2" />
                        </div>
                    </div>
    <div>
    </div>
    <div class="mb-3">
        <label>Día</label>
        <InputSelect @bind-Value="horario.Dia" class="form-select text-14">
            @foreach (var dia in DiasSemana)
            {
                <option value="@dia">@dia</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Hora Inicio</label>
        <InputSelect @bind-Value="horario.HoraInicio" class="form-select text-14">
            @foreach (var hora in Horas)
            {
                <option value="@hora">@hora</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Hora Fin</label>
        <InputSelect @bind-Value="horario.HoraFin" class="form-select text-14">
            @foreach (var hora in Horas)
            {
                <option value="@hora">@hora</option>
            }
        </InputSelect>
    </div>
      <MudIconButton Icon="@Icons.Material.Filled.Save" aria-label="Guardar" ButtonType="ButtonType.Submit"></MudIconButton>
      <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="Eliminar"></MudIconButton>
      
    </div>
        </div>
     </div>
   </div>
</EditForm>
@if (eliminado)
{
    <p>El horario ha sido eliminado con éxito.</p>
}

@code {
    [Parameter]
    public int HorarioId { get; set; }
    private bool eliminado = false;
    List<string> Horas = new List<string> { "8:00 AM", "9:00 AM", "10:00 AM", "11:00 AM",
    "12:00 PM","1:00 PM","2:00 PM","3:00 PM","4:00 PM",
    "5:00 PM","6:00 PM",};
    List<string> DiasSemana = new List<string> { "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado" };
    private Horario horario = new Horario();
    protected override async Task OnInitializedAsync()
    {
        if (HorarioId != 0) 
        {
            horario = await HorarioRepo.GetHorarioPorIdAsync(HorarioId);
        }
    }
    private async Task Guardar()
    {
        await HorarioRepo.CreateHorario(horario);
        Nuevo();
    }

    private async Task Buscar()
    {
        horario = await HorarioRepo.GetHorarioPorIdAsync(horario.HorarioId);
    }

    private async Task Eliminar()
    {

        if (horario != null)
        {
            eliminado = await HorarioRepo.DeleteHorario(horario.HorarioId);
            if (eliminado)
            {
                Nuevo();
            }
        }
    }
    public void Nuevo()
    {
        horario = new Horario();
    }
    
}
